// ЗАДАНИЕ 1

// Напишите функцию `parseCount` 
// Аргументом функции является значение, которое необходимо распарсить.


function parseCount(value) {

    //Для парсинга воспользуйтесь функцией `Number.parseInt`

    const parsed = Number.parseInt();

    // Если результатом парсинга является значение `NaN`, то выбрасывайте исключение с ошибкой *"Невалидное значение"

    if (Number.isNaN(NaN)) {
        throw new InvalidValue("Невалидное значение")
    }
    //Верните результат парсинга из функции.
    else return parsed
}

// Напишите функцию `validateCount`
// Аргументом функции является значение, которое необходимо распарсить

function validateCount(value) {

    //Попробуйте распарсить значение с помощью функции `parseCount`.
    try {
        parseCount();
    }
    catch {

    }

    //Если распарсить удаётся успешно, то возвращайте результат.

    if ()

        // Перехватывайте исключение, которое может выбрасывать функция `parseCount`.

        // Возвращайте ошибку из функции в случае перехвата исключения
        return
}











// ЗАДАНИЕ 2


// Напишите класс `Triangle`
// Конструктор класса должен принимать 3 стороны треугольника.
// В случае нарушения правила существования треугольника 
// выбрасывайте исключение с ошибкой *"Треугольник с такими сторонами не существует"


class Triangle {
    constructor(a, b, c) {
        if (a + b > c || a + c > b || b + c > a) {
            throw new Error("Треугольник с такими сторонами не существует")
        }
        else {
            this.a = a;
            this.b = b;
            this.c = c;
        }
        // Метод `getPerimeter` должен возвращать периметр треугольника.
        getPerimeter() {
            let P = (this.a + this.b +this.c); 
            return P
        }

        // Метод `getArea` должен возвращать площадь треугольника
        getArea() {
            let PP = getPerimeter() * 0.5;
            let S = Math.sqrt(PP * (PP - a) * (PP - b) * (PP - c));
            return S
        }
    }

// Напишите функцию `getTriangle`
// Аргументами функции являются 3 значения длин сторон.

function getTriangle(a, b, c) {
try {
    const NewTriangle = new Triangle;
    return NewTriangle
}
catch {
    return
}
    //Попытайтесь вернуть новый объект треугольника
    // В случае перехвата исключения возвращайте объект с двумя методами
    // `getArea` и `getPerimeter`, которые возвращают строку: *"Ошибка! Треугольник не существует"
}